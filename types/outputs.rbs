module GTK
  class Outputs
    attr_accessor width: Integer
    attr_accessor height: Integer

    alias w width
    alias h height

    attr_accessor background_color: [Integer, Integer, Integer]
    attr_accessor clear_before_render: bool

    attr_reader solids: SolidsOutputsArray
    attr_reader sprites: SpritesOutputsArray
    attr_reader lines: LinesOutputsArray
    attr_reader labels: LabelsOutputsArray
    attr_reader borders: BordersOutputsArray
    attr_reader primitives: PrimitivesOutputsArray
    attr_reader debug: DebugOutputsArray

    attr_reader static_solids: StaticSolidsOutputsArray
    attr_reader static_sprites: StaticSpritesOutputsArray
    attr_reader static_lines: StaticLinesOutputsArray
    attr_reader static_labels: StaticLabelsOutputsArray
    attr_reader static_borders: StaticBordersOutputsArray
    attr_reader static_primitives: StaticPrimitivesOutputsArray
    attr_reader static_debug: StaticDebugOutputsArray

    attr_reader sounds: Array[String | { path: String, ?gain: Float } | { input: String, ?gain: Float }]

    attr_reader screenshots: SpritesOutputsArray

    attr_reader a11y: Hash[String, untyped]

    def can_screenshot?: () -> bool

    def reset: () -> void

    def clear: () -> void

    include WatchLabels
  end

  module WatchLabels
    def watch: (untyped object, ?label_style: Hash[Symbol, untyped]?, background_style: Hash[Symbol, untyped]?) -> void

    def watch_ivars: (untyped object, ?label_style: Hash[Symbol, untyped]?, background_style: Hash[Symbol, untyped]?) -> void

    def watch_attrs: (untyped object, ?label_style: Hash[Symbol, untyped]?, background_style: Hash[Symbol, untyped]?) -> void

    def watch_fps: () -> void
  end

  class SolidsOutputsArray < Array[solid | Array[untyped]]
    type solid = {
        x: Numeric, y: Numeric,
        w: Numeric, h: Numeric,
        ?r: Integer?, ?g: Numeric?, ?b: Numeric?, ?a: Numeric?,
        ?anchor_x: Numeric?, ?anchor_y: Numeric?,
        ?blendmode_enum: Integer?
      }
  end

  class SpritesOutputsArray < Array[sprite | Array[untyped]]
    type sprite = {
        x: Numeric, y: Numeric,
        w: Numeric?, h: Numeric?,
        path: String,
        ?r: Integer?, ?g: Numeric?, ?b: Numeric?, ?a: Numeric?,
        ?flip_horizontally: bool?, ?flip_vertically: bool?,
        ?angle: Numeric?,
        ?anchor_x: Numeric?, ?anchor_y: Numeric?,
        ?angle_anchor_x: Numeric?, ?angle_anchor_y: Numeric?,
        ?tile_x: Integer?, ?tile_y: Integer?, ?tile_w: Numeric?, ?tile_h: Numeric?,
        ?source_x: Integer?, ?source_y: Integer?, ?source_w: Numeric?, ?source_h: Numeric?,
        ?blendmode_enum: Integer?,
        ?scale_quality_enum: Integer?,
        ?x2: Numeric?, ?y2: Numeric?, ?x3: Numeric?, ?y3: Numeric?,
        ?source_x2: Numeric?, ?source_y2: Numeric?, ?source_x3: Numeric?, ?source_y3: Numeric?,
      }
  end

  class LabelsOutputsArray < Array[label | Array[untyped]]
    type label = {
        x: Numeric, y: Numeric,
        text: String,
        ?size_enum: Integer?, ?size_px: Numeric?,
        ?alignment_enum: Integer?, ?vertical_alignment_enum: Integer?,
        ?r: Integer?, ?g: Numeric?, ?b: Numeric?, ?a: Numeric?,
        ?font: String?,
        ?anchor_x: Numeric?, ?anchor_y: Numeric?,
      }
  end

  class BordersOutputsArray < Array[border | Array[untyped]]
    type border = {
        x: Numeric, y: Numeric,
        w: Numeric, h: Numeric,
        ?r: Integer?, ?g: Numeric?, ?b: Numeric?, ?a: Numeric?,
        ?anchor_x: Numeric?, ?anchor_y: Numeric?,
        ?blendmode_enum: Integer?
      }
  end

  class LinesOutputsArray < Array[line | Array[untyped]]
    type line = {
        x: Numeric, y: Numeric,
        x2: Numeric, y2: Numeric,
        ?r: Integer?, ?g: Numeric?, ?b: Numeric?, ?a: Numeric?,
        ?blendmode_enum: Integer?
      }
  end

  class PrimitivesOutputsArray < Array[primitive]
    type primitive = SpritesOutputsArray::sprite
      | LabelsOutputsArray::label
      | LinesOutputsArray::line
      | SolidsOutputsArray::solid & { primitive_marker: :solid }
      | BordersOutputsArray::border & { primitive_marker: :border }
  end

  class DebugOutputsArray < Array[debug]
    include WatchLabels

    type debug = String | PrimitivesOutputsArray::primitive
  end

  class StaticSolidsOutputsArray < Array[SolidsOutputsArray::solid | Array[untyped]]
  end

  class StaticSpritesOutputsArray < Array[SpritesOutputsArray::sprite | Array[untyped]]
  end

  class StaticLabelsOutputsArray < Array[LabelsOutputsArray::label | Array[untyped]]
  end

  class StaticBordersOutputsArray < Array[BordersOutputsArray::border | Array[untyped]]
  end

  class StaticLinesOutputsArray < Array[LinesOutputsArray::line | Array[untyped]]
  end

  class StaticPrimitivesOutputsArray < Array[PrimitivesOutputsArray::primitive]
  end

  class StaticDebugOutputsArray < Array[DebugOutputsArray::debug]
  end
end
